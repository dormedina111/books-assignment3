name: assignment3

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set DATE
        run: echo "DATE=$(date -Iminutes)" >> $GITHUB_ENV

      - name: Create log file
        run: |
          echo "${{ env.DATE }}" > log.txt
          echo "${{ github.actor }}" >> log.txt

      - name: Build Docker image
        run: docker build . --file books/Dockerfile --tag ${{ secrets.DOCKER_USERNAME }}/books-service:latest
        continue-on-error: true

      - name: Log build result
        run: echo "image successfully built" >> log.txt
        if: success()

      - name: Log build failure
        run: echo "image not able to be built" >> log.txt
        if: failure()

      - name: Upload log on build completion
        uses: actions/upload-artifact@v4
        with:
          name: log
          path: log.txt

  test:
    needs: build
    runs-on: ubuntu-latest
    services:
      mongo:
        image: mongo:latest
        options: --health-cmd "mongo --eval 'db.runCommand(\"ping\").ok'" --health-interval 10s --health-timeout 5s --health-retries 3
        ports:
          - 27017:27017

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Install dependencies
        run: pip install pytest requests pymongo

      - name: Download log from build job
        uses: actions/download-artifact@v2
        with:
          name: log
          path: .

      - name: Start containers
        run: docker-compose up -d
        continue-on-error: true

      - name: Log container start result
        run: echo "Container up and running" >> log.txt
        if: success()

      - name: Log container start failure
        run: echo "Container failed to run" >> log.txt
        if: failure()

      - name: Upload log on container failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: log
          path: log.txt

      - name: Run tests
        env:
          MONGO_URL: mongodb://mongo:27017/library
        run: |
          pytest -v tests/assn3_tests.py | tee assn3_test_results.txt
        continue-on-error: true

      - name: Log test result
        run: echo "tests succeeded" >> log.txt
        if: success()

      - name: Log test failure
        run: echo "tests failed" >> log.txt
        if: failure()

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: assn3_test_results.txt

      - name: Upload log
        uses: actions/upload-artifact@v4
        with:
          name: log
          path: log.txt

  query:
    needs: test
    runs-on: ubuntu-latest
    services:
      mongo:
        image: mongo:latest
        options: --health-cmd "mongo --eval 'db.runCommand(\"ping\").ok'" --health-interval 10s --health-timeout 5s --health-retries 3
        ports:
          - 27017:27017

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Install dependencies
        run: pip install requests pymongo

      - name: Start containers
        run: docker-compose up -d
        continue-on-error: true

      - name: Execute queries and record results
        run: |
          # Add books 1, 2, 3, 6, 7, and 8
          BOOKS=(
            '{"title":"Adventures of Huckleberry Finn", "ISBN":"9780520343641", "genre":"Fiction"}'
            '{"title":"The Best of Isaac Asimov", "ISBN":"9780385050784", "genre":"Science Fiction"}'
            '{"title":"Fear No Evil", "ISBN":"9780394558783", "genre":"Biography"}'
            '{"title":"The Adventures of Tom Sawyer", "ISBN":"9780195810400", "genre":"Fiction"}'
            '{"title":"I, Robot", "ISBN":"9780553294385", "genre":"Science Fiction"}'
            '{"title":"Second Foundation", "ISBN":"9780553293364", "genre":"Science Fiction"}'
          )
          for BOOK in "${BOOKS[@]}"; do
            curl -X POST -H "Content-Type: application/json" -d "$BOOK" http://localhost:5001/books
          done

          # Read queries from query.txt and execute them
          while IFS= read -r QUERY; do
            RESPONSE=$(curl -s -w "%{http_code}" "http://localhost:5001/books$QUERY")
            HTTP_CODE="${RESPONSE: -3}"
            BODY="${RESPONSE%???}"
            
            echo "query: $QUERY" >> response.txt
            if [[ "$HTTP_CODE" == "200" ]]; then
              echo "response: $BODY" >> response.txt
            else
              echo "response: error $HTTP_CODE" >> response.txt
            fi
          done < query.txt
        continue-on-error: true

      - name: Upload response
        uses: actions/upload-artifact@v4
        with:
          name: response
          path: response.txt
